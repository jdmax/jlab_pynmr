# PyNMR Config file, YAML
---
channels:
    Proton:
        name: Proton
        species: proton 
        cent_freq: 213.0            # Center frequency in MHz   (float)
        mod_freq: 400.0             # Frequency modulation in kHz   (float)
        power: 200.0                # RF power in mV  (float)
        sweep_file: tri             # Sweep type (tri is standard triangle; if file name that exists, reads for arbitrary)
    Deuteron:
        name: Deuteron
        species: deuteron
        cent_freq: 32.7       
        mod_freq: 400.0        
        power: 200.0      
        sweep_file: tri  
settings:
    default_channel: Proton     # Default from channels listed above
    daq_type: Test              # Select DAQ mode (FPGA, NIDAQ or Test)
    event_dir: data             # Directory to put eventfiles in, relative to main.py or absolute
    te_dir: te                  # Directory to put te files in, relative to main.py or absolute
    log_dir: log                # Directory to put log files in, relative to main.py or absolute
    ss_dir: False               # Directory to put screenshots files in, screenshots not taken if False
    steps: 512                  # Frequency points per sweep (must be 500 for test sweeps)
    num_per_chunk: 32           # Number of sweeps per chunk (IntSweepCycle from FPGA manual)
    tune_per_chunk:  8          # Number of sweeps per chunk to take in tune mode
    epics_temp: 4he             # EPICS channel of temp to use as default 
    epics_test: True            # If true, doesn't attempt to contact EPICS server
    fpga_settings:    
        ip: 129.57.37.134             # Device IP address (str)
        port: 1028              # Device port  (int)
        tcp_buffer: 1460        # Default TCP buffer size  (int)
        dwell: 10               # Settle time in ms between frequency switch and ADC read (int)
        per_point: 2            # Samples taken and averaged at each frequency point of a sweep (int)
        timeout_run: 20         # TCP timeout for running sweeps
        timeout_tune: 1         # TCP timeout for running sweeps
        timeout_check: 1         # TCP timeout for running sweeps
        timeout_udp: 1         # TCP timeout for running sweeps
        phase_cal: 211692085    # Conversion int to divide phase ADC values by to get roughly volts
        diode_cal: 829421       # Conversion int to divide diode ADC values by to get roughly volts
        test_freqs: False       # Send test frequencies to FPGA
        adc_test: False         # ADC test mode flag
    nidaq_settings:
        phase_chan: Dev1/ai0
        diode_chan: Dev1/ai1
        ao_chan: Dev1/ao0
        pretris: 10             # Number of pretriangles
        time_per_pt: 29         # Dwell time at frequency, usecs
        settling_ratio: 0.5     # Where in the dwell time the read occurs (0 to 1)     
    RS_settings:
        ip: 129.57.37.135             # R&S IP
        power: 100              # RF amplitude in mV
        timeout: 2              # Telnet timeout in secs
    analysis:
        base_def: 0             # index of default baseline subtraction method      
        sub_def: 0              # index of default fit subtraction method   
        res_def: 0              # index of default results analysis method   
        wings:                  # default bounds for fit wings, must be four numbers between 0 and 1
            - 0.01
            - 0.30
            - 0.70
            - 0.99
        sum_range:              # default bounds for range integration option
            - 0.35
            - 0.65
epics_reads:                    # EPICS channels to read: key is channel name, value is string to display
    4he: 4He Temp (K)
    3he: 3He Temp (K)
    bath_top: Bath Top (K)
    bath_bot: Bath Bottom (K)
    uwave_f: uWave Freq (GHz)
    uwave_p: uWave Power (mW)
    main_f: Main Flow (slpm)
    sep_f: Separator Flow (slpm)
    mag_i: Magnet Current (A)
    posit: Target Position
    test: Test Item
epics_writes:                   # List of channels to write, key is channel, value is attribute of Event class 
    targ_pol: pol 
    targ_area: area
    targ_cc: cc
    targ_time: stop_stamp  
...